{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "lmdo cloud formation template",

    "Parameters": {
        "StackLookupArn": {
            "Description": "The stack Lookup Lambda function ARN",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "256"
        },

        "LookupStackName": {
            "Description": "Global service resource stack",
            "Type": "String"
        },

        "DefaultMemorySize": {
            "Description": "The Lambda function default memory size",
            "Type": "String",
            "Default": "128",
            "AllowedValues": ["128", "512", "1024"]
        },

        "DefaultTimeout": {
            "Description": "The Lambda function default timeout",
            "Type": "Number",
            "Default": "16"
        },

        "EnableS3Policy" : {
            "Description" : "Enable default S3 IAM policy",
            "Type": "String",
            "Default": "true"
        },

        "PutLambdaFunction" : {
            "Description" : "Create/Update Lambda function",
            "Type": "String",
            "Default": "false"
        },

        "UserName" : {
            "Description" : "Service user name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "256"
        },

        "StageName" : {
            "Description" : "Service stage name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "256"
        },

        "ServiceName" : {
            "Description" : "Service name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "256"
        },

        "LambdaBucket" : {
            "Description" : "Lambda package bucket name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "256"
        },

        "LambdaKey" : {
            "Description" : "Lambda package name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "256"
        },

        "LambdaFunction1Name" : {
            "Description" : "Lambda function 1 name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "256"
        },

        "LambdaFunction1HandlerName" : {
            "Description" : "Lambda function handler name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "256"
        },

        "BucketName" : {
            "Description" : "Demo bucket",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "256"
        },

        "RootDomainName" : {
            "Description" : "Root Domain Name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "256"
        }
    },

    "Conditions" : {
        "S3PolicyCondition" : {"Fn::Equals" : [{"Ref" : "EnableS3Policy"}, "true"]},
        "PutLambdaFunctionCondition" : {"Fn::Equals" : [{"Ref" : "PutLambdaFunction"}, "true"]}
    },

    "Resources":{
        "GlobalStackInfo": {
            "Type": "Custom::GlobalStackInfo",
            "Properties": {
                "ServiceToken": { "Ref" : "StackLookupArn" },
                "StackName": {
                    "Ref": "LookupStackName"
                }
            }
        },

        "DefaultIamRoleAPI":{
            "Type":"AWS::IAM::Role",
            "Properties":{
                "RoleName": {"Fn::Join": ["-", ["APIDefaultIamRole", {"Ref":"AWS::StackName"}]]},
                "AssumeRolePolicyDocument":{
                    "Version":"2012-10-17",
                    "Statement":[
                        {
                            "Effect":"Allow",
                            "Principal":{
                                "Service":[
                                    "apigateway.amazonaws.com"
                                ]
                            },
                            "Action":["sts:AssumeRole"]
                        }
                    ]
                },
                "Path":"/"
            }
        },

        "IamLambdaPolicyAPI":{
            "Type":"AWS::IAM::Policy",
            "Properties":{
                "PolicyName": {"Fn::Join": ["-", ["LambdaIamLogPolicy", {"Ref":"AWS::StackName"}]]},
                "PolicyDocument":{
                    "Version":"2012-10-17",
                    "Statement":[
                        {
                            "Effect":"Allow",
                            "Action":[
                                "lambda:InvokeFunction"
                            ],
                            "Resource": {"Fn::Join": ["", ["arn:aws:lambda:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":function:*"]]}
                        },
                        {
                            "Effect":"Allow",
                            "Action":[
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles":[
                    {
                        "Ref":"DefaultIamRoleAPI"
                    }
                ]
            }
        },

        "DefaultIamRoleLambda":{
            "Type":"AWS::IAM::Role",
            "Properties":{
                "RoleName": {"Fn::Join": ["-", ["LambdaDefaultIamRole", {"Ref":"AWS::StackName"}]]},
                "AssumeRolePolicyDocument":{
                    "Version":"2012-10-17",
                    "Statement":[
                        {
                            "Effect":"Allow",
                            "Principal":{
                                "Service":[
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action":["sts:AssumeRole"]
                        }
                    ]
                },
                "Path":"/"
            }
        },

        "IamDefaultPolicyLambda":{
            "Type":"AWS::IAM::Policy",
            "Properties":{
                "PolicyName": {"Fn::Join": ["-", ["LambdaIamDefaultPolicy", {"Ref":"AWS::StackName"}]]},
                "PolicyDocument":{
                    "Version":"2012-10-17",
                    "Statement":[
                        {
                            "Effect":"Allow",
                            "Action":[
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "ec2:CreateNetworkInterface",
                                "ec2:DescribeNetworkInterfaces",
                                "ec2:DeleteNetworkInterface"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles":[
                    {
                        "Ref":"DefaultIamRoleLambda"
                    }
                ]
            }
        },

        "IamS3PolicyLambda":{
            "Type":"AWS::IAM::Policy",
            "Condition" : "S3PolicyCondition",
            "Properties":{
                "PolicyName": {"Fn::Join": ["-", ["LambdaIamS3Policy", {"Ref":"AWS::StackName"}]]},
                "PolicyDocument":{
                    "Version":"2012-10-17",
                    "Statement":[
                        {
                            "Effect":"Allow",
                            "Action":[
                                "s3:DeleteObject",
                                "s3:DeleteObjectVersion",
                                "s3:GetObject",
                                "s3:PutObject"
                            ],
                            "Resource": [
                                {"Fn::GetAtt": ["GlobalStackInfo", "LambdaBucketArn"]},
                                {"Fn::Join": ["", ["arn:aws:s3:::", {"Ref":"S3Bucket"}]]}
                            ]
                        }
                    ]
                },
                "Roles":[
                    {
                        "Ref":"DefaultIamRoleLambda"
                    }
                ]
            }
        },

        "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Join": ["", [{"Ref": "BucketName"}, {"Ref":"RootDomainName"}]]
                },
                "AccessControl": "PublicReadWrite",
                "Tags": [
                    {"Key": "AccountId", "Value": {"Ref": "AWS::AccountId"}},
                    {"Key": "StackId", "Value": {"Ref": "AWS::StackId"}},
                    {"Key": "StackName", "Value": {"Ref": "AWS::StackName"}},
                    {"Key": "Region", "Value": {"Ref": "AWS::Region"}},
                    {"Key": "AwsService", "Value": "S3"},
                    {"Key": "Name", "Value": {"Ref": "BucketName"}}
                ]
            }
        },

        "S3BucketPolicy" : {
            "Type" : "AWS::S3::BucketPolicy",
            "Properties" : {
                "Bucket" : {"Ref" : "S3Bucket"},
                "PolicyDocument": {
                    "Statement":[{
                        "Action":[
                            "s3:DeleteObject",
                            "s3:DeleteObjectVersion",
                            "s3:GetObject",
                            "s3:PutObject"
                        ],
                        "Sid":"Public Read For Get Bucket Objects",
                        "Effect":"Allow",
                        "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "S3Bucket" } , "/*" ]]},
                        "Principal": "*"
                    }]
                }
            }
        },

        "LambdaFunc":{
            "Type": "AWS::Lambda::Function",
            "Condition" : "PutLambdaFunctionCondition",
            "Properties": {
                "Code": {
                    "S3Bucket": {"Ref": "LambdaBucket"},
                    "S3Key": {"Ref": "LambdaKey"}
                },
                "FunctionName": {"Fn::Join": ["-", [{"Ref": "UserName"}, {"Ref": "StageName"}, {"Ref": "ServiceName"}, {"Ref": "LambdaFunction1Name"}]]},
                "Handler": {"Ref": "LambdaFunction1HandlerName"},
                "MemorySize": {"Ref": "DefaultMemorySize"},
                "Role": {"Fn::GetAtt":["DefaultIamRoleLambda", "Arn"]},
                "Runtime": "python2.7",
                "Timeout": {"Ref": "DefaultTimeout"},
                "VpcConfig": {
                    "SecurityGroupIds": [{"Fn::GetAtt": [ "GlobalStackInfo", "DefaultVPCSecurityGroupId"]}],
                    "SubnetIds": [{"Fn::GetAtt": [ "GlobalStackInfo", "PrivateSubnet1Zone1"]}, {"Fn::GetAtt": ["GlobalStackInfo", "PrivateSubnet1Zone2"]}]
                }
            }
        }
    },

    "Outputs": {
        "DefaultIamRoleAPIArn": {
            "Description": "API Gateway IAM Role Arn",
            "Value": {"Fn::GetAtt": ["DefaultIamRoleAPI", "Arn"]}
        },

        "S3BucketName": {
            "Value": {"Ref": "S3Bucket"},
            "Description": "Example bucket name"
        },

    	"S3BucketDomainName": {
	        "Description": "Example bucket domain name",
	        "Value": {"Fn::GetAtt": ["S3Bucket", "DomainName"]}
	    },

      "LambdaFunctionArn": {
          "Condition" : "PutLambdaFunctionCondition",
	        "Description": "Test Lambda function Arn",
          "Value": {"Fn::GetAtt": ["LambdaFunc", "Arn"]}
	    }
    }
}
