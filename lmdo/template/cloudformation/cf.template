{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "lmdo cloud formation template",

    "Parameters": {
        "StackLookupArn" : {
            "Description" : "The stack Lookup Lambda function ARN",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "256"
        },

        "LookupStackName": {
            "Description": "Global service resource stack",
            "Type": "String"
        },

        "DefaultMemorySize" : {
            "Description" : "The Lambda function default memory size",
            "Type": "String",
            "Default": "128",
            "AllowedValues" : ["128", "512", "1024"]
        },

        "DefaultTimeout" : {
            "Description" : "The Lambda function default timeout",
            "Type": "Number",
            "Default": "16"
        },

        "EnableS3Policy" : {
            "Description" : "Enable default S3 IAM policy",
            "Type": "String",
            "Default": "false"
        },       
        
        "EnableCognitoPolicy" : {
            "Description" : "Enable default Cognito IAM policy",
            "Type": "String",
            "Default": "false"
        },       
        
        "EnableDynamodbPolicyCondition" : {
            "Description" : "Enable default Dynamodb IAM policy",
            "Type": "String",
            "Default": "false"
        },
    },

    "Conditions" : {
        "S3PolicyCondition" : {"Fn::Equals" : [{"Ref" : "EnableS3Policy"}, "true"]},
        "CognitoPolicyCondition" : {"Fn::Equals" : [{"Ref" : "EnableCognitoPolicy"}, "true"]},
        "DynamodbPolicyCondition" : {"Fn::Equals" : [{"Ref" : "EnableDynamodbPolicyCondition"}, "true"]}
    },

    "Resources":{  
        "GlobalStackInfo": {
            "Type": "Custom::GlobalStackInfo",
            "Properties": {
                "ServiceToken": { "Ref" : "StackLookupArn" },
                "StackName": {
                    "Ref": "LookupStackName"
                }
            }
        },

        "DefaultIamRoleLambda":{  
            "Type":"AWS::IAM::Role",
            "Properties":{  
                "RoleName": "Fn::Join": ["-", ["LambdaDefaultIamRole", {"Ref":"AWS::StackId"}]]
                "AssumeRolePolicyDocument":{  
                    "Version":"2012-10-17",
                    "Statement":[  
                        {  
                            "Effect":"Allow",
                            "Principal":{  
                                "Service":[  
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action":["sts:AssumeRole"]
                        } 
                    ]
                },
                "Path":"/"
            }
        },

        "IamLogPolicyLambda":{  
            "Type":"AWS::IAM::Policy",
            "Properties":{  
                "PolicyName": "Fn::Join": ["-", ["LambdaIamLogPolicy", {"Ref":"AWS::StackId"}]]
                "PolicyDocument":{  
                    "Version":"2012-10-17",
                    "Statement":[  
                        {  
                            "Effect":"Allow",
                            "Action":[  
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": "Fn::Join": [":", ["arn", "aws", "logs", {"Ref": "AWS::Region"}, "*", "*"]]
                        }
                    ]
                },
                "Roles":[  
                    {  
                        "Ref":"DefaultIamRoleLambda"
                    }
                ]
            }
        },

        "IamCognitoPolicyLambda":{  
            "Type":"AWS::IAM::Policy",
            "Condition" : "CognitoPolicyCondition",
            "Properties":{  
                "PolicyName": "Fn::Join": ["-", ["LambdaIamCognitoPolicy", {"Ref":"AWS::StackId"}]]
                "PolicyDocument":{  
                    "Version":"2012-10-17",
                    "Statement":[  
                        {  
                            "Effect":"Allow",
                            "Action":[  
                                "cognito-identity:GetOpenIdTokenForDeveloperIdentity"
                            ],
                            "Resource": {"Fn::GetAtt": [ "GlobalStackInfo", "DefaultCognitoUserPoolArn" ]}
                        }
                    ]
                },
                "Roles":[  
                    {  
                        "Ref":"DefaultIamRoleLambda"
                    }
                ]
            }
        },

        "IamS3PolicyLambda":{  
            "Type":"AWS::IAM::Policy",
            "Condition" : "S3PolicyCondition",
            "Properties":{  
                "PolicyName": "Fn::Join": ["-", ["LambdaIamS3Policy", {"Ref":"AWS::StackId"}]],
                "PolicyDocument":{  
                    "Version":"2012-10-17",
                    "Statement":[  
                        {  
                            "Effect":"Allow",
                            "Action":[  
                                "s3:DeleteObject",
                                "s3:DeleteObjectVersion",
                                "s3:GetObject",
                                "s3:PutObject"
                            ],
                            "Resource": {"Fn::GetAtt": [ "GlobalStackInfo", "DefaultS3ServicesArn" ]}
                        }
                    ]
                },
                "Roles":[  
                    {  
                        "Ref":"DefaultIamRoleLambda"
                    }
                ]
            }
        },

        "IamDynamodbPolicyLambda":{  
            "Type":"AWS::IAM::Policy",
            "Condition" : "DynamodbPolicyCondition",
            "Properties":{  
                "PolicyName": "Fn::Join": ["-", ["LambdaIamDynamodbPolicy", {"Ref":"AWS::StackId"}]]
                "PolicyDocument":{  
                    "Version":"2012-10-17",
                    "Statement":[  
                        {  
                            "Effect":"Allow",
                            "Action":[  
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:DescribeReservedCapacity",
                                "dynamodb:DescribeReservedCapacityOfferings",
                                "dynamodb:DescribeStream",
                                "dynamodb:DescribeTable",
                                "dynamodb:GetItem",
                                "dynamodb:GetRecords",
                                "dynamodb:GetShardIterator",
                                "dynamodb:ListStreams",
                                "dynamodb:PutItem",
                                "dynamodb:Query",
                                "dynamodb:Scan",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {"Fn::GetAtt": [ "DynamodbTable", "Arn" ]}
                        }
                    ]
                },
                "Roles":[  
                    {  
                        "Ref":"DefaultIamRoleLambda"
                    }
                ]
            }
        },

        "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Join": ["", [{"Ref": "BucketName"}, {"Ref":"RootDomainName"}]]
                },
                "AccessControl": "PublicReadWrite",
                "Tags": [
                    {"Key": "AccountId", "Value": {"Ref": "AWS::AccountId"}},
                    {"Key": "Region", "Value": {"Ref": "AWS::Region"}},
                    {"Key": "AwsService", "Value": "S3"},
                    {"Key": "Name", "Value": {"Ref": "BucketName"}} 
                ]            
            }
        },

        "S3BucketPolicy" : {
            "Type" : "AWS::S3::BucketPolicy",
            "Properties" : {
                "Bucket" : {"Ref" : "S3Bucket"},
                "PolicyDocument": {
                    "Statement":[{
                        "Action":[
                            "s3:DeleteObject",
                            "s3:DeleteObjectVersion",
                            "s3:GetObject",
                            "s3:PutObject"
                        ],
                        "Sid":"Public Read For Get Bucket Objects",
                        "Effect":"Allow",
                        "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "S3Bucket" } , "/*" ]]},
                        "Principal": "*"
                    }]
                }
            }
        },

        "DynamodbTable":{  
            "Type":"AWS::DynamoDB::Table",
            "Properties":{
                "TableName": {"Ref": "TableName"},
                "AttributeDefinitions":[  
                    {  
                        "AttributeName":"uid",
                        "AttributeType":"S"
                    },
                    {  
                        "AttributeName":"email",
                        "AttributeType":"S"
                    },
                    {  
                        "AttributeName":"Language",
                        "AttributeType":"S"
                    }
                ],
                "KeySchema":[  
                    {  
                        "AttributeName":"uid",
                        "KeyType":"HASH"
                    }
                ],
                "ProvisionedThroughput":{  
                    "ReadCapacityUnits": {"Ref": "TableReadCapacity"},
                    "WriteCapacityUnits": {"Ref": "TableWriteCapacity"}
                },
                "GlobalSecondaryIndexes":[  
                    {  
                        "IndexName":"EmailIndex",
                        "KeySchema":[  
                            {  
                                "AttributeName":"email",
                                "KeyType":"HASH"
                            }
                        ],
                        "Projection":{  
                            "ProjectionType":"ALL"
                        },
                        "ProvisionedThroughput":{  
                            "ReadCapacityUnits": {"Ref": "TableGlobalSecondaryReadCapacity"},
                            "WriteCapacityUnits": {"Ref": "TableGlobalSecondaryWriteCapacity"}
                        }
                    }
                ]
            }
        },

        "LambdaFunc":{  
            "Type":"AWS::Lambda::Function",
            "Properties":{  
                "Code":{  
                    "S3Bucket":{  
                        {"Fn::GetAtt": [ "GlobalStackInfo", "DefaultS3ServicesBucketName" ]}
                    },
                    "S3Key": { "Fn::Join": ["/", [{"Ref":"ServiceName"}, {"Fn::Join": ["-", [{"Ref": "StageName"}, {"Fn::Join": ["", [{"Ref": "FunctionName"}, ".zip"]]} ]]} ]]}
                },
                "FunctionName": { "Fn::Join": ["-", [{"Ref": "StageName"}, {"Ref":"ServiceName"}, "SomeLambdaFunction"]] },
                "Handler": "SomeLambdaFunctionHandler",
                "MemorySize": {"Ref": "DefaultMemorySize"},
                "Role":{  
                    "Fn::GetAtt":[  
                        "DefaultIamRoleLambda",
                        "Arn"
                    ]
                },
                "Runtime":"python2.7",
                "Timeout": {"Ref": "DefaultTimeout"},
                "VpcConfig": {
                    "SecurityGroupIds": [{"Fn::GetAtt": [ "GlobalStackInfo", "DefaultLambdaSecurityGroupId" ]}],
                    "SubnetIds": [{"Fn::GetAtt": [ "GlobalStackInfo", "DefaultLambdaSubnetId" ]}]
                }
            }
        }
    },

    "Outputs": {
        "LmdoBucketName": {
            "Value": {"Ref": "LmdoBucket"},
            "Description": "Global Cloudformation bucket name"
        },

    	"LmdoBucketDomainName": {
	        "Description": "Global Cloudformation bucket domain name",
	        "Value": {"Fn::GetAtt": ["LmdoBucket", "DomainName"]}
	    }
    }
}
