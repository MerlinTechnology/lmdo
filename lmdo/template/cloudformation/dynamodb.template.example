{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "lmdo cloud formation template",

    "Parameters": {
        "StackLookupArn": {
            "Description": "The stack Lookup Lambda function ARN",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "256"
        },

        "LookupStackName": {
            "Description": "Global service resource stack",
            "Type": "String"
        },

        "DefaultMemorySize": {
            "Description": "The Lambda function default memory size",
            "Type": "String",
            "Default": "128",
            "AllowedValues": ["128", "512", "1024"]
        },

        "DefaultTimeout": {
            "Description": "The Lambda function default timeout",
            "Type": "Number",
            "Default": "16"
        },

        "TableReadCapacity": {
            "Description": "The Lambda function default table read capacity",
            "Type": "Number",
            "Default": "25"
        },

        "TableWriteCapacity": {
            "Description": "The Lambda function default table write capacity",
            "Type": "Number",
            "Default": "25"
        },

        "TableGlobalSecondaryReadCapacity": {
            "Description": "The Lambda function default global secondary table read capacity",
            "Type": "Number",
            "Default": "25"
        },

        "TableGlobalSecondaryWriteCapacity": {
            "Description": "The Lambda function default global secondary table write capacity",
            "Type": "Number",
            "Default": "25"
        },

        "PutLambdaFunction" : {
            "Description" : "Create/Update Lambda function",
            "Type": "String",
            "Default": "false"
        },

        "UserName" : {
            "Description" : "Service user name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "256"
        },

        "StageName" : {
            "Description" : "Service stage name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "256"
        },

        "ServiceName" : {
            "Description" : "Service name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "256"
        },

        "LambdaBucket" : {
            "Description" : "Lambda package bucket name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "256"
        },

        "LambdaKey" : {
            "Description" : "Lambda package name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "256"
        },
 
        "LambdaFunction1Name" : {
            "Description" : "Lambda function 1 name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "256"
        },
 
        "LambdaFunction1HandlerName" : {
            "Description" : "Lambda function handler name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "256"
        },
       
        "EnableDynamodbPolicyCondition" : {
            "Description" : "Enable default Dynamodb IAM policy",
            "Type": "String",
            "Default": "true"
        },

        "DynamodbTableName" : {
            "Description" : "Demo Dynamodb Table",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "256"
        }
    },

    "Conditions" : {
        "PutLambdaFunctionCondition" : {"Fn::Equals" : [{"Ref" : "PutLambdaFunction"}, "true"]},
        "DynamodbPolicyCondition" : {"Fn::Equals" : [{"Ref" : "EnableDynamodbPolicyCondition"}, "true"]}
    },

    "Resources":{  
        "GlobalStackInfo": {
            "Type": "Custom::GlobalStackInfo",
            "Properties": {
                "ServiceToken": { "Ref" : "StackLookupArn" },
                "StackName": {
                    "Ref": "LookupStackName"
                }
            }
        },

        "DefaultIamRoleLambda":{  
            "Type":"AWS::IAM::Role",
            "Properties":{  
                "RoleName": {"Fn::Join": ["-", ["LambdaDefaultIamRole", {"Ref":"AWS::StackName"}]]},
                "AssumeRolePolicyDocument":{  
                    "Version":"2012-10-17",
                    "Statement":[  
                        {  
                            "Effect":"Allow",
                            "Principal":{  
                                "Service":[  
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action":["sts:AssumeRole"]
                        } 
                    ]
                },
                "Path":"/"
            }
        },

        "IamDefaultPolicyLambda":{  
            "Type":"AWS::IAM::Policy",
            "Properties":{  
                "PolicyName": {"Fn::Join": ["-", ["LambdaIamDefaultPolicy", {"Ref":"AWS::StackName"}]]},
                "PolicyDocument":{  
                    "Version":"2012-10-17",
                    "Statement":[  
                        {  
                            "Effect":"Allow",
                            "Action":[  
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "ec2:CreateNetworkInterface",
                                "ec2:DescribeNetworkInterfaces",
                                "ec2:DeleteNetworkInterface"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles":[  
                    {  
                        "Ref":"DefaultIamRoleLambda"
                    }
                ]
            }
        },

        "IamDynamodbPolicyLambda":{  
            "Type":"AWS::IAM::Policy",
            "Condition" : "DynamodbPolicyCondition",
            "Properties":{  
                "PolicyName": {"Fn::Join": ["-", ["LambdaIamDynamodbPolicy", {"Ref":"AWS::StackName"}]]},
                "PolicyDocument":{  
                    "Version":"2012-10-17",
                    "Statement":[  
                        {  
                            "Effect":"Allow",
                            "Action":[  
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:DescribeReservedCapacity",
                                "dynamodb:DescribeReservedCapacityOfferings",
                                "dynamodb:DescribeStream",
                                "dynamodb:DescribeTable",
                                "dynamodb:GetItem",
                                "dynamodb:GetRecords",
                                "dynamodb:GetShardIterator",
                                "dynamodb:ListStreams",
                                "dynamodb:PutItem",
                                "dynamodb:Query",
                                "dynamodb:Scan",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {"Fn::Join": ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":table/", {"Ref": "DynamodbTable"}]]}
                        }
                    ]
                },
                "Roles":[  
                    {  
                        "Ref":"DefaultIamRoleLambda"
                    }
                ]
            }
        },

        "DynamodbTable":{  
            "Type":"AWS::DynamoDB::Table",
            "Properties":{
                "TableName": {"Ref": "DynamodbTableName"},
                "AttributeDefinitions":[  
                    {  
                        "AttributeName":"id",
                        "AttributeType":"S"
                    },
                    {  
                        "AttributeName":"email",
                        "AttributeType":"S"
                    }
                ],
                "KeySchema":[  
                    {  
                        "AttributeName":"id",
                        "KeyType":"HASH"
                    }
                ],
                "ProvisionedThroughput":{  
                    "ReadCapacityUnits": {"Ref": "TableReadCapacity"},
                    "WriteCapacityUnits": {"Ref": "TableWriteCapacity"}
                },
                "GlobalSecondaryIndexes":[  
                    {  
                        "IndexName":"EmailIndex",
                        "KeySchema":[  
                            {  
                                "AttributeName":"email",
                                "KeyType":"HASH"
                            }
                        ],
                        "Projection":{  
                            "ProjectionType":"ALL"
                        },
                        "ProvisionedThroughput":{  
                            "ReadCapacityUnits": {"Ref": "TableGlobalSecondaryReadCapacity"},
                            "WriteCapacityUnits": {"Ref": "TableGlobalSecondaryWriteCapacity"}
                        }
                    }
                ]
            }
        },

        "LambdaFunc": {  
            "Type": "AWS::Lambda::Function",
            "Condition" : "PutLambdaFunctionCondition",
            "Properties": {  
                "Code": {  
                    "S3Bucket": {"Ref": "LambdaBucket"},
                    "S3Key": {"Ref": "LambdaKey"}
                },
                "FunctionName": {"Fn::Join": ["-", [{"Ref": "UserName"}, {"Ref": "StageName"}, {"Ref":"ServiceName"}, {"Ref": "LambdaFunction1Name"}]]},
                "Handler": {"Ref": "LambdaFunction1HandlerName"},
                "MemorySize": {"Ref": "DefaultMemorySize"},
                "Role": {"Fn::GetAtt": ["DefaultIamRoleLambda", "Arn"]},
                "Runtime": "python2.7",
                "Timeout": {"Ref": "DefaultTimeout"},
                "VpcConfig": {
                    "SecurityGroupIds": [{"Fn::GetAtt": [ "GlobalStackInfo", "DefaultVPCSecurityGroupId"]}],
                    "SubnetIds": [{"Fn::GetAtt": [ "GlobalStackInfo", "PrivateSubnet1Zone1"]}, {"Fn::GetAtt": [ "GlobalStackInfo", "PrivateSubnet1Zone2"]}]
                }
            }
        }
    },

    "Outputs": {
        "DynamoDBTableName": {
            "Value": {"Ref": "DynamodbTable"},
            "Description": "Dynamodb table name"
        },

        "LambdaFunctionArn": {
            "Condition" : "PutLambdaFunctionCondition",
 	        "Description": "Test Lambda function Arn",
	        "Value": {"Fn::GetAtt": ["LambdaFunc", "Arn"]}
	    }
    }
}
