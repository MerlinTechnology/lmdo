# ******************************
# @mandatory
# @description: microservice name
# *******************************
Service: superman

# **********************************
# @mandatory
# @description: microservice creator
# **********************************
User: default

# ***************************************************************
# @mandatory
# @description: AWS credential profile name, default to 'default'
# ***************************************************************
Profile: default
# Or
# Region: AWS Region Code
# AWSKey: aws_access_key_id
# AWSSecret: aws_secret_access_key

# ***********************************
# @mandatory
# @description: stage of your service
# ***********************************
Stage: dev

# ***************************************************************
# @optional
# @description: cloudformation files to upload to. If not set
# will load from local but won't work for nested stack templates
# ***************************************************************
# CloudformationBucket: cloudformation.bucket.name

# ***********************************************************************
# @optional
# If enabled, it will be used otherwise lmdo
# will create a stack name with format  {User}-{Stage}-{Service}-service
# ***********************************************************************
# StackName: blah
CloudFormation:
    S3Bucket: blah.com.au                   # Bucket to upload template, if not provided, will upload from local but won't work for nested stacks without it
    TemplateRepoPath: path_to_template      # Path to re-useable stack folder
    Stacks:
      - Name: stack_one                     # stack name postfix
        DisableUserPrefix: False            # disable stack name prefix generated by lmdo
        TemplatePath: path_to_the_template  # master template path
        ParamsPath: path_of_params          # params path for the stack

      - NameSuffix: stack_two              # stack name postfix
        TemplatePath: path_to_the_template  # master template path
        ParamsPath: path_of_params          # params path for the stack

# ****************************************************
# @optional
# @description: static asset to deploy to given bucket
# ****************************************************
# AssetS3Bucket: static.bucket.name
# AssetDirectory: build

# **********************************************************************
# @mandatory if having APIGateway
# @description: let lmdo know what the api name will be if using swagger
# **********************************************************************
# ApiGatewayName: api-title
# ApiVarMapToFile:  #optional. replacement of string in swagger to template content
#     $apiIntegrationRequestTemple: api_integration_request_template.json

# ***********************************************
# @optional
# @description:
# If you are working in virtualenv environment
# set this to True so that the packaging of lambda
# functions can pick up the dependencies
# ************************************************
# VirtualEnv: False

# ****************************************
# @optional
# @description: lambda functions to deploy
# ****************************************
#Lambda:
    #*** Standard lambda function
#    - S3Bucket: lambda.bucket.name        # mandatory, the bucket to load your package to
#      Type: default                       # Optional, other types is django
#      FunctionName: superman              # mandatory, the actual function name in AWS will have the format of <user>-<stage>-<service-name>-<FunctionName>
#      Handler: handler.fly                # mandatory, define the handler function
#      MemorySize: 128                     # optional, default to 128
#      RoleArn: rolearn                    # Provide a role arn or assume role policy doc. If neither provided,
#      RolePolicy:                         # the default will have apigateway role and allow logging    
#        AssumeRoles:                      # optional
#          - apigateway.amazonaws.com      # optional Assume rols
#        PolicyDocument: policy.json       # optional path/to/policy role Policy
#        ManagedPolicyArns:                # optional manage policy arns
#          - arn:aws:blah
#      Runtime: python2.7                  # optional default to 'python2.7'
#      Timeout: 180                        # optional default to 180
#      VpcConfig:                          # optional, Lambda VPC configuration
#          SecurityGroupIds:
#              - string
#              - string
#          SubnetIds:
#              - string
#              - string
#      EnvironmentVariables:              # optional, runtime environment variable
#          MYSQL_HOST: localhost
#          MYSQL_PASSWORD: secret
#          MYSQL_USERNAME: admin
#          MYSQL_DATABASE: lmdo

    #*** Django bridged lambda function
#    - S3Bucket: lambda.bucket.name        # mandatory
#      Type: django                        # Other types
#      DisableApiGateway: False            # Optional, if set to True, the apigateway for Django app won't be created
#      ApiBasePath: /path                  # Mandatory if apigateway to be created. Base resource path for django app
#      FunctionName: superman              # mandatory
#      CognitoUserPoolId: ap-southeast-2_blahblah    #Optional, AWS congnito user pool authorizer
#      MemorySize: 128                     # optional, default to 128
#      RoleArn: rolearn                    # Provide a role arn or assume role policy doc. If neither provided,
#      RolePolicy:                         # optional the default will have apigateway role and allow logging    
#        AssumeRoles:                      # optional
#          - apigateway.amazonaws.com      # optional Assume rols
#        PolicyDocument: policy.json       # optional path/to/policy  role Policy
#        ManagedPolicyArns:                # optional manage policy arns
#          - arn:aws:blah
#      Runtime: python2.7                  # optional default to 'python2.7'
#      Timeout: 180                        # optional default to 180
#      VpcConfig:                          # optional
#          SecurityGroupIds:
#              - string
#              - string
#          SubnetIds:
#              - string
#      EnvironmentVariables:                       # mandatory
#          DJANGO_SETTINGS_MODULE: mysite.settings # mandatory     

 
